// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AlecSmith96/dating-api/internal/usecases (interfaces: UserAuthenticator)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../../mocks/userAuthenticator.go . UserAuthenticator
//
// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	reflect "reflect"

	entities "github.com/AlecSmith96/dating-api/internal/entities"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserAuthenticator is a mock of UserAuthenticator interface.
type MockUserAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockUserAuthenticatorMockRecorder
}

// MockUserAuthenticatorMockRecorder is the mock recorder for MockUserAuthenticator.
type MockUserAuthenticatorMockRecorder struct {
	mock *MockUserAuthenticator
}

// NewMockUserAuthenticator creates a new mock instance.
func NewMockUserAuthenticator(ctrl *gomock.Controller) *MockUserAuthenticator {
	mock := &MockUserAuthenticator{ctrl: ctrl}
	mock.recorder = &MockUserAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAuthenticator) EXPECT() *MockUserAuthenticatorMockRecorder {
	return m.recorder
}

// IssueJWT mocks base method.
func (m *MockUserAuthenticator) IssueJWT(arg0 uuid.UUID) (*entities.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueJWT", arg0)
	ret0, _ := ret[0].(*entities.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueJWT indicates an expected call of IssueJWT.
func (mr *MockUserAuthenticatorMockRecorder) IssueJWT(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueJWT", reflect.TypeOf((*MockUserAuthenticator)(nil).IssueJWT), arg0)
}

// LoginUser mocks base method.
func (m *MockUserAuthenticator) LoginUser(arg0, arg1 string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserAuthenticatorMockRecorder) LoginUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserAuthenticator)(nil).LoginUser), arg0, arg1)
}
